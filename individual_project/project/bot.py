from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

bot = TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ê–∏—Å—Ç, –º–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ –ø–æ–º–æ–≥–∞—Ç—å –º–æ–ª–æ–¥—ã–º —Å–µ–º–µ–π–∫–∞–º –±–µ–∑ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.
---------------------------------------------------------------------------
–Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–∏–¥—É–º–∞—Ç—å –≤–∞–º –∫—Ä–∞—Å–∏–≤–æ–µ, –∞ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–æ—á–∫–∞!
---------------------------------------------------------------------------
–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤—ã—à–µ 70.000 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç—Å—è —Å 2011-2021 –≥–æ–¥–∞.
–ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ —ç—Ç–∏—Ö –¥–µ—Å—è—Ç–∏ –ª–µ—Ç –≤–µ–ª–æ—Å—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–∞–¥ –∫–∞–∂–¥—ã–º –∏–º–µ–Ω–µ–º –≤–ø–ª–æ—Ç—å –¥–æ —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —ç—Ç–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –≥–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª–∞ –±—ã–ª–∏ –Ω–∞–∑–≤–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º!
---------------------------------------------------------------------------
/name - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–º—è
""")

# ethnicity question
def generate_markup_ethnicity(chat_id):
    sql = f'''SELECT DISTINCT Ethnicity FROM Names_data'''
    data = []
    result = manager.select_data(sql, data)

    markup = InlineKeyboardMarkup()
    for i in result:
        markup.add(InlineKeyboardButton(i[0], callback_data=f'ethnicity {i[0]}'))
    bot.send_message(chat_id,"–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–æ—á–∫–∞, –∏–ª–∏ –∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–µ–∂—ë–Ω–Ω—É—é.ü•∞", reply_markup=markup)

# gender question
def generate_markup_gender(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('MALE', callback_data='gender MALE'))
    markup.add(InlineKeyboardButton('FEMALE', callback_data='gender FEMALE'))
    bot.send_message(chat_id,f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ä–µ–±—ë–Ω–æ—á–∫–∞.ü•∞", reply_markup=markup)

def same_names_question(chat_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('10', callback_data='amount 10'))
    markup.add(InlineKeyboardButton('100', callback_data='amount 100'))
    markup.add(InlineKeyboardButton('1000', callback_data='amount 1000'))
    markup.add(InlineKeyboardButton('10000', callback_data='amount 10000'))
    bot.send_message(chat_id,f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—ë–∑–æ–∫ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–æ—á–∫–∞.ü•∞", reply_markup=markup)

# names output
def names_amount(ethnicity, gender, amount, chat_id):
    sql = f'''SELECT Names_data.Childs_First_Name, SUM(Names_data.Count) AS overall
            FROM Names_data WHERE Ethnicity="{ethnicity}" AND Gender="{gender}"
            GROUP BY Names_data.Childs_First_Name HAVING overall <= {amount} ORDER BY overall DESC LIMIT 10'''
    data = []

    result = manager.select_data(sql, data)

    response = ''
    responselist = ['–ò–º—è:  |–ù–∞–∑–≤–∞–Ω–æ –¥–µ—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç:\n']
    for i in result:
        responselist.append(f'{i[0]} : {i[1]}\n')
    amount = len(responselist) - 1

    if amount > 0:
        bot.send_message(chat_id, f'''–í–æ—Ç —Ç–æ–ø {amount} —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–º—ë–Ω —Å—Ä–µ–¥–∏ –¥–µ—Ç–µ–π {ethnicity}.ü•∞
{response.join(responselist)}''')
    else:
        bot.send_message(chat_id, '–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º—ë–Ω —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.üò≤')
    
# name a child
@bot.message_handler(commands=['name'])
def name_an_infant(message):
    generate_markup_ethnicity(message.chat.id)
    
# callback process
data = []
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global data
    # —É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã
    bot.delete_message(call.message.chat.id, call.message.message_id)
    if call.data.split()[0] == 'ethnicity':
        # –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        ethnicity = call.data.replace(f'{call.data.split()[0]}', '')
        ethnicity = ethnicity.strip()
        data.append(ethnicity)
        # –Ω–µ–∫—Å—Ç –≥—É—ç—à–Ω
        generate_markup_gender(call.message.chat.id)
    elif call.data.split()[0] == 'gender':
        # –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        gender = call.data.split()[1]
        data.append(gender)
        # –Ω–µ–∫—Å—Ç –≥—É—ç—à–Ω
        same_names_question(call.message.chat.id)
    elif call.data.split()[0] == 'amount':
        # –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        amount = int(call.data.split()[1])
        data.append(amount)
        # –∞–Ω—Å–≤–µ—Ä 
        names_amount(data[0], data[1], data[2], call.message.chat.id)
        data = []
        
    
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()